// generated by stringer -type=NUD_TYPE,RTMGRP_TYPE,RTM_TYPE,NTF_TYPE,NDA_TYPE -output=stringer.go const.go; DO NOT EDIT

package main

import "fmt"

const (
	_NUD_TYPE_name_0 = "NUD_NONENUD_INCOMPLETENUD_REACHABLE"
	_NUD_TYPE_name_1 = "NUD_STALE"
	_NUD_TYPE_name_2 = "NUD_DELAY"
	_NUD_TYPE_name_3 = "NUD_PROBE"
	_NUD_TYPE_name_4 = "NUD_FAILED"
	_NUD_TYPE_name_5 = "NUD_NOARP"
	_NUD_TYPE_name_6 = "NUD_PERMANENT"
)

var (
	_NUD_TYPE_index_0 = [...]uint8{0, 8, 22, 35}
	_NUD_TYPE_index_1 = [...]uint8{0, 9}
	_NUD_TYPE_index_2 = [...]uint8{0, 9}
	_NUD_TYPE_index_3 = [...]uint8{0, 9}
	_NUD_TYPE_index_4 = [...]uint8{0, 10}
	_NUD_TYPE_index_5 = [...]uint8{0, 9}
	_NUD_TYPE_index_6 = [...]uint8{0, 13}
)

func (i NUD_TYPE) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _NUD_TYPE_name_0[_NUD_TYPE_index_0[i]:_NUD_TYPE_index_0[i+1]]
	case i == 4:
		return _NUD_TYPE_name_1
	case i == 8:
		return _NUD_TYPE_name_2
	case i == 16:
		return _NUD_TYPE_name_3
	case i == 32:
		return _NUD_TYPE_name_4
	case i == 64:
		return _NUD_TYPE_name_5
	case i == 128:
		return _NUD_TYPE_name_6
	default:
		return fmt.Sprintf("NUD_TYPE(%d)", i)
	}
}

const (
	_RTMGRP_TYPE_name_0 = "RTMGRP_LINKRTMGRP_NOTIFYRTMGRP_NEIGHRTMGRP_TCRTMGRP_IPV4_IFADDRRTMGRP_IPV4_MROUTERTMGRP_IPV4_ROUTERTMGRP_IPV4_RULERTMGRP_IPV6_IFADDRRTMGRP_IPV6_MROUTERTMGRP_IPV6_ROUTERTMGRP_IPV6_IFINFORTMGRP_DECnet_IFADDR"
	_RTMGRP_TYPE_name_1 = "RTMGRP_DECnet_ROUTE"
	_RTMGRP_TYPE_name_2 = "RTMGRP_IPV6_PREFIX"
)

var (
	_RTMGRP_TYPE_index_0 = [...]uint8{0, 11, 24, 36, 45, 63, 81, 98, 114, 132, 150, 167, 185, 205}
	_RTMGRP_TYPE_index_1 = [...]uint8{0, 19}
	_RTMGRP_TYPE_index_2 = [...]uint8{0, 18}
)

func (i RTMGRP_TYPE) String() string {
	switch {
	case 1 <= i && i <= 13:
		i -= 1
		return _RTMGRP_TYPE_name_0[_RTMGRP_TYPE_index_0[i]:_RTMGRP_TYPE_index_0[i+1]]
	case i == 15:
		return _RTMGRP_TYPE_name_1
	case i == 17:
		return _RTMGRP_TYPE_name_2
	default:
		return fmt.Sprintf("RTMGRP_TYPE(%d)", i)
	}
}

const _RTM_TYPE_name = "RTM_NEWLINKRTM_DELLINKRTM_GETLINKRTM_SETLINKRTM_NEWADDRRTM_DELADDRRTM_GETADDRRTM_NEWROUTERTM_DELROUTERTM_GETROUTERTM_NEWNEIGHRTM_DELNEIGHRTM_GETNEIGHRTM_NEWRULERTM_DELRULERTM_GETRULERTM_NEWQDISCRTM_DELQDISCRTM_GETQDISCRTM_NEWTCLASSRTM_DELTCLASSRTM_GETTCLASSRTM_NEWTFILTERRTM_DELTFILTERRTM_GETTFILTERRTM_NEWACTIONRTM_DELACTIONRTM_GETACTIONRTM_NEWPREFIXRTM_GETMULTICASTRTM_GETANYCASTRTM_NEWNEIGHTBLRTM_GETNEIGHTBLRTM_SETNEIGHTBLRTM_NEWNDUSEROPTRTM_NEWADDRLABELRTM_DELADDRLABELRTM_GETADDRLABELRTM_GETDCBRTM_SETDCBRTM_NEWNETCONFRTM_GETNETCONFRTM_NEWMDBRTM_DELMDBRTM_GETMDB"

var _RTM_TYPE_map = map[RTM_TYPE]string{
	16: _RTM_TYPE_name[0:11],
	17: _RTM_TYPE_name[11:22],
	18: _RTM_TYPE_name[22:33],
	19: _RTM_TYPE_name[33:44],
	20: _RTM_TYPE_name[44:55],
	21: _RTM_TYPE_name[55:66],
	22: _RTM_TYPE_name[66:77],
	24: _RTM_TYPE_name[77:89],
	25: _RTM_TYPE_name[89:101],
	26: _RTM_TYPE_name[101:113],
	28: _RTM_TYPE_name[113:125],
	29: _RTM_TYPE_name[125:137],
	30: _RTM_TYPE_name[137:149],
	32: _RTM_TYPE_name[149:160],
	33: _RTM_TYPE_name[160:171],
	34: _RTM_TYPE_name[171:182],
	36: _RTM_TYPE_name[182:194],
	37: _RTM_TYPE_name[194:206],
	38: _RTM_TYPE_name[206:218],
	40: _RTM_TYPE_name[218:231],
	41: _RTM_TYPE_name[231:244],
	42: _RTM_TYPE_name[244:257],
	44: _RTM_TYPE_name[257:271],
	45: _RTM_TYPE_name[271:285],
	46: _RTM_TYPE_name[285:299],
	48: _RTM_TYPE_name[299:312],
	49: _RTM_TYPE_name[312:325],
	50: _RTM_TYPE_name[325:338],
	52: _RTM_TYPE_name[338:351],
	58: _RTM_TYPE_name[351:367],
	62: _RTM_TYPE_name[367:381],
	64: _RTM_TYPE_name[381:396],
	66: _RTM_TYPE_name[396:411],
	67: _RTM_TYPE_name[411:426],
	68: _RTM_TYPE_name[426:442],
	72: _RTM_TYPE_name[442:458],
	73: _RTM_TYPE_name[458:474],
	74: _RTM_TYPE_name[474:490],
	78: _RTM_TYPE_name[490:500],
	79: _RTM_TYPE_name[500:510],
	80: _RTM_TYPE_name[510:524],
	82: _RTM_TYPE_name[524:538],
	84: _RTM_TYPE_name[538:548],
	85: _RTM_TYPE_name[548:558],
	86: _RTM_TYPE_name[558:568],
}

func (i RTM_TYPE) String() string {
	if str, ok := _RTM_TYPE_map[i]; ok {
		return str
	}
	return fmt.Sprintf("RTM_TYPE(%d)", i)
}

const (
	_NTF_TYPE_name_0 = "NTF_USENTF_SELF"
	_NTF_TYPE_name_1 = "NTF_MASTER"
	_NTF_TYPE_name_2 = "NTF_PROXY"
	_NTF_TYPE_name_3 = "NTF_ROUTER"
)

var (
	_NTF_TYPE_index_0 = [...]uint8{0, 7, 15}
	_NTF_TYPE_index_1 = [...]uint8{0, 10}
	_NTF_TYPE_index_2 = [...]uint8{0, 9}
	_NTF_TYPE_index_3 = [...]uint8{0, 10}
)

func (i NTF_TYPE) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _NTF_TYPE_name_0[_NTF_TYPE_index_0[i]:_NTF_TYPE_index_0[i+1]]
	case i == 4:
		return _NTF_TYPE_name_1
	case i == 8:
		return _NTF_TYPE_name_2
	case i == 128:
		return _NTF_TYPE_name_3
	default:
		return fmt.Sprintf("NTF_TYPE(%d)", i)
	}
}

const _NDA_TYPE_name = "NDA_UNSPECNDA_DSTNDA_LLADDRNDA_CACHEINFONDA_PROBESNDA_VLANNDA_PORTNDA_VNINDA_IFINDEX"

var _NDA_TYPE_index = [...]uint8{0, 10, 17, 27, 40, 50, 58, 66, 73, 84}

func (i NDA_TYPE) String() string {
	if i+1 >= NDA_TYPE(len(_NDA_TYPE_index)) {
		return fmt.Sprintf("NDA_TYPE(%d)", i)
	}
	return _NDA_TYPE_name[_NDA_TYPE_index[i]:_NDA_TYPE_index[i+1]]
}
